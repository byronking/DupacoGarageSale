@model DupacoGarageSale.Web.Models.GarageSaleViewModel

@{
    ViewBag.Title = "Add a stopover to your itinerary";
    Layout = "~/Views/Shared/_ItineraryLayout.cshtml";
    
    //var itineraryId = Model.
}

<div class="container">
    <div class="row" style="margin-left:10px;">
        <h2><a href="~/Home" style="text-decoration:none;">Home </a>/ Itinerary / @ViewBag.Title </h2>

        <div class="row down_30">
            <div class="col-md-8">
                <div class="form-inline">
                    <div class="form-group">
                        <p class="lead">Where do you want to go?  Add search text to the field below.</p>
                        <input type="text" id="txtDestination" style="width:300px;" class="form-control" />
                    </div>
                   @* <div class="form-group">
                        <button class="btn btn-primary" id="btnStopoverSearch" onclick="geocodeAddress();">Search</button>
                    </div>*@
                </div>
                
                
            </div>
        </div>
        <div class="row down_30">
            <div class="col-md-12">
                <div id="stopover-map" class="alert alert-info" style="padding:3px;width:100%;height:600px;"></div>
            </div>
            
        </div>
    </div>
</div>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0PudWjsqLxR5ZBsdLIBHUjMikiAZJgu8&sensor=false&libraries=places"></script>
<script type="text/javascript">     
   
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.

    function initialize() {

        var markers = [];
        var map = new google.maps.Map(document.getElementById('stopover-map'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var defaultBounds = new google.maps.LatLngBounds(
            new google.maps.LatLng(42.872982, -90.385702),
            new google.maps.LatLng(44.088606, -87.657584));
        map.fitBounds(defaultBounds);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('txtDestination');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        var searchBox = new google.maps.places.SearchBox((input));

    // Listen for the event fired when the user selects an item from the
    // pick list. Retrieve the matching places for that item.
    google.maps.event.addListener(searchBox, 'places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
            return;
        }

        // Clear the previous markers
        for (var i = 0, marker; marker = markers[i]; i++) {
            marker.setMap(null);
        }

        // For each place, get the icon, place name, and location.
        markers = [];
        var marker;

        var bounds = new google.maps.LatLngBounds();
        for (var i = 0, place; place = places[i]; i++) {
            var image = {
                url: place.icon,
                size: new google.maps.Size(70, 70),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

            //debugObject(place);

            placeMarker(map, place, image);
            markers.push(marker);
            bounds.extend(place.geometry.location);
        }

        map.fitBounds(bounds);
    });

    // Bias the SearchBox results towards places that are within the bounds of the
    // current map's viewport.
    google.maps.event.addListener(map, 'bounds_changed', function() {
        var bounds = map.getBounds();
        searchBox.setBounds(bounds);
    });
}

    google.maps.event.addDomListener(window, 'load', initialize);

    function placeMarker(map, place, image) {
        var marker = new google.maps.Marker({
            icon: image,
            position: place.geometry.location,
            map: map
        });
        
        var infowindow = new google.maps.InfoWindow({
            content: place.name + " <br/> " + place.formatted_address + " <br/> " + '<a href="/Itinerary/AddItineraryWaypoint?id=' + @Model.GarageSaleItinerary.ItineraryId + '&address=' + place.formatted_address + '">Add to itinerary</a>'
        });

        google.maps.event.addListener(marker, 'click', function () {
            infowindow.open(map, marker);
        });
    }

    function debugObject(inputobject) {
        obj = inputobject;
        for (x in obj) {
            alert(x + ": " + obj[x]);
        }
    }
</script>