@model DupacoGarageSale.Web.Models.GarageSaleViewModel

@{
    ViewBag.Title = "View your itinerary";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var itineraryLegs = new List<int>();
    var arrayItineraryLegsJoined = string.Empty;
}

<div id="page-wrap" class="jumbotron" style="min-height:500px;">
    <div class="container">
        <div class="row">
            <h2><a href="~/Home" style="text-decoration:none;">Home / </a>@ViewBag.Title</h2>
            <br />
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title"><strong>Travel itinerary for @Model.User.FirstName @Model.User.LastName</strong></h3>
                </div>
                <div class="panel-body">                    
                    @{ 
                        if (Model.User.Address != null)
                        {
                            
                            var startingAddress =  Model.User.Address.Address1 + " " + Model.User.Address.Address2 + " " + Model.User.Address.City + " " + 
                            Model.User.Address.State  + " " + Model.User.Address.Zip;

                            <input type="hidden" id="hdnStartingAddress" value="@startingAddress" />
                            <input type="hidden" id="hdnItineraryLegs" value="@Model.GarageSaleItinerary.Count" />
                       
                            <form>
                                <div class="form-group">
                                    <label for="txtStartingAddress">Starting point:</label>
                                    <input type="text" id="txtStartingAddress" class="form-control" style="width:350px;" value="@startingAddress" />
                                </div><br />

                                @foreach (var address in Model.GarageSaleItinerary) 
                                {
                                    var itineraryAddress = address.SaleAddress1 + " " + address.SaleAddress2 + " " + address.SaleCity + " " + address.SaleState + " " + address.SaleZipCode;

                                    itineraryLegs.Add(address.ItineraryLegId);   
                                                 
                                    <div class="form-group">
                                        <label for="txtItineraryLeg@(address.ItineraryLegId)">Itinerary leg:</label>
                                        <input type="text" id="txtItineraryLeg@(address.ItineraryLegId)" style="width:350px;" value="@itineraryAddress" />
                                        <a href="/GarageSale/DeleteItineraryLeg?legId=@(address.ItineraryLegId)" class="btn btn-xs btn-danger">Delete this leg</a>
                                    </div>
                                }

                                @{
                                    var arrayItineraryLegs = itineraryLegs.ToArray();
                                    arrayItineraryLegsJoined = string.Join(",", arrayItineraryLegs);
                                }
                                <br />
                                <input type="button" id="btnMapItinerary" class="btn btn-primary" value="Get directions" onclick="calculateRoute();" />
                            </form><br /><br />

                            <!-- the map with directions -->
                            <div class="row">
                                <div class="col-md-12">
                                    <div id="map-itinerary"></div>
                                </div>
                            </div><br />
                            <div class="row">
                                <div class="col-md-10">
                                    <div id="driving-directions" class="container-overflow hidden">
                                        <h3>Driving directions:</h3> 
                                        <div id="directions_panel"></div>                                
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            // Show something here.
                               <p class="lead">No itinerary available.</p>
                            <div>
                                To add itinerary items, first make sure you have an address in your profile, then when shopping, click the 
                                'Add to itinerary' link on a garage sale home page.
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEuaqeYdUf01yfZX12DIppc6AKHeegvzY"></script>
<script type="text/javascript"> 
    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();
    var map;
    var geocoder;

    function initialize() {
        directionsDisplay = new google.maps.DirectionsRenderer();
        var dubuque = new google.maps.LatLng(41.850033, -87.6500523);
        var mapOptions = {
            zoom: 5,
            center: dubuque
        }
        map = new google.maps.Map(document.getElementById('map-itinerary'), mapOptions);
        directionsDisplay.setMap(map);
        
        geoCodeAddress(map);
    }

    function geoCodeAddress(map) {
        var address = document.getElementById('hdnStartingAddress').value;

        geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                var searchCenter = results[0].geometry.location; // Set the center point of the search.
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });

                var infowindow = new google.maps.InfoWindow();
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent('Your starting point: ' + results[0].formatted_address);
                    infowindow.open(map, marker);
                });
            }
        });
    }

    function calculateRoute() {
        var itineraryLegs = '@arrayItineraryLegsJoined';
        var selectedLegs = new Array();
        selectedLegs = itineraryLegs.split(',');
        //alert('legs: ' + selectedLegs);

        var start = document.getElementById('hdnStartingAddress').value;
        alert('starting address: ' + start);
        var lastItem = 0;
        var legsCount = selectedLegs.length;

        //alert('legs count: ' + legsCount);
        lastItem = selectedLegs[legsCount-1];
        //alert('last item: ' + lastItem);

        var end = document.getElementById('txtItineraryLeg' + lastItem).value;
        //alert('end addy: ' + end);

        // Push the itinerary legs into the waypoints and then set the last waypoint as the destination.
        var wayPointsList = [];        

        for (var i = 0; i < selectedLegs.length; i++) {

            var wypt = document.getElementById('txtItineraryLeg' + selectedLegs[i]).value;
            //alert('waypoint: ' + wypt);

            wayPointsList.push({
                location: wypt,
                stopover: true
            });
        }

        var request = {
            origin: start,
            destination: end,
            waypoints: wayPointsList,
            optimizeWaypoints: true,
            travelMode: google.maps.TravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
                var route = response.routes[0];
                var directionsPanel = document.getElementById('directions_panel');
                directionsPanel.innerHTML = '';

                // For each route, display summary information.
                for (var i = 0; i < route.legs.length; i++) {
                    var routeSegment = i + 1;
                    directionsPanel.innerHTML += '<b>Route Segment: ' + routeSegment + '</b><br>';
                    directionsPanel.innerHTML += route.legs[i].start_address + ' to ';
                    directionsPanel.innerHTML += route.legs[i].end_address + '<br>';
                    directionsPanel.innerHTML += 'Distance: ' + route.legs[i].distance.text + '<br>';

                    for (x = 0; x < route.legs[i].steps.length; x++) {
                        directionsPanel.innerHTML += route.legs[i].steps[x].instructions + ' <br>';

                        //debugObject(route.legs[i].steps[x]);
                    }

                    directionsPanel.innerHTML += ' <br>';
                }
            }            
        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);

    function debugObject(inputobject) {
        obj = inputobject;
        for (x in obj) {
            alert(x + ": " + obj[x]);
        }
    }

</script>